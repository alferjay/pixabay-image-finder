{"version":3,"sources":["components/image-results/ImageResults.js"],"names":["useStyles","makeStyles","theme","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","gridList","width","height","gridTile","transform","transition","flexGrow","icon","color","ImageResults","imageListContent","images","useState","open","setOpen","currentImage","setCurrentImage","classes","handleOpen","image","handleClose","cellHeight","cols","className","spacing","map","img","in","key","id","onClick","e","largeImageURL","style","cursor","src","alt","tags","title","subtitle","user","actionIcon","aria-label","onClose","aria-labelledby","fullWidth","maxWidth","marginRight","variant"],"mappings":"0OAiBMA,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,KAAM,CACJC,QAAS,OACTC,SAAU,OACVC,eAAgB,eAChBC,SAAU,SACVC,gBAAiBN,EAAMO,QAAQC,WAAWC,OAE5CC,SAAU,CACRC,MAAO,OACPC,OAAQ,QAEVC,SAAU,CACR,cAAe,CACbC,UAAW,8BACXC,WAAY,qBAGdC,SAAU,GAEZC,KAAM,CACJC,MAAO,gCA4FIC,UAxFM,SAAC,GAAgB,IAKhCC,EALkBC,EAAa,EAAbA,OAAa,EACXC,oBAAS,GADE,mBAC5BC,EAD4B,KACtBC,EADsB,OAEKF,mBAAS,IAFd,mBAE5BG,EAF4B,KAEdC,EAFc,KAI7BC,EAAU7B,IAGV8B,EAAa,SAACC,GAClBL,GAAQ,GACRE,EAAgBG,IAEZC,EAAc,kBAAMN,GAAQ,IA6ClC,OA1CEJ,EADEC,EAEA,kBAAC,IAAD,CACEU,WAAY,IACZC,KAAM,EACNC,UAAWN,EAAQjB,SACnBwB,QAAS,GAERb,EAAOc,KAAI,SAACC,GAAD,OACV,kBAAC,IAAD,CAAMC,GAAG,QACP,kBAAC,IAAD,CACEC,IAAKF,EAAIG,GACTC,QAAS,SAACC,GAAD,OAAOb,EAAWQ,EAAIM,gBAC/BC,MAAO,CAAEC,OAAQ,WACjBX,UAAWN,EAAQd,UAEnB,yBAAKgC,IAAKT,EAAIM,cAAeI,IAAKV,EAAIW,OACtC,kBAAC,IAAD,CACEC,MAAOZ,EAAIW,KACXE,SACE,oCACK,gCAASb,EAAIc,OAGpBC,WACE,kBAAC,IAAD,CACEC,aAAA,qBAA0BhB,EAAIW,MAC9Bd,UAAWN,EAAQV,KACnBuB,QAAS,SAACC,GAAD,OAAOb,EAAWQ,EAAIM,iBAE/B,kBAAC,IAAD,eAUG,KAInB,yBAAKT,UAAWN,EAAQ1B,MACrBmB,EACD,kBAAC,IAAD,CACEG,KAAMA,EACN8B,QAASvB,EACTwB,kBAAgB,qBAChBC,WAAS,EACTC,SAAS,MAGT,kBAAC,IAAD,KACE,yBACEX,IAAKpB,EACLqB,IAAI,UACJH,MAAO,CAAEhC,MAAO,OAAQC,OAAQ,WAGpC,kBAAC,IAAD,CAAe+B,MAAO,CAAEc,YAAa,SACnC,kBAAC,IAAD,CAAQjB,QAASV,EAAa4B,QAAQ,WAAWxC,MAAM,WAAvD","file":"static/js/4.25c0c0ea.chunk.js","sourcesContent":["import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\nimport {\n  GridList,\n  GridListTile,\n  GridListTileBar,\n  IconButton,\n  Dialog,\n  //DialogTitle,\n  DialogActions,\n  DialogContent,\n  Button,\n  Grow,\n} from \"@material-ui/core\";\nimport { ZoomIn } from \"@material-ui/icons\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    justifyContent: \"space-around\",\n    overflow: \"hidden\",\n    backgroundColor: theme.palette.background.paper,\n  },\n  gridList: {\n    width: \"100%\",\n    height: \"100%\",\n  },\n  gridTile: {\n    \"&:hover img\": {\n      transform: \"translateY(-50%) scale(1.2)\",\n      transition: \"all ease-in 200ms\",\n    },\n\n    flexGrow: 1,\n  },\n  icon: {\n    color: \"rgba(255, 255, 255, 0.9)\",\n  },\n}));\n\nconst ImageResults = ({ images }) => {\n  const [open, setOpen] = useState(false);\n  const [currentImage, setCurrentImage] = useState(\"\");\n\n  const classes = useStyles();\n  let imageListContent;\n\n  const handleOpen = (image) => {\n    setOpen(true);\n    setCurrentImage(image);\n  };\n  const handleClose = () => setOpen(false);\n\n  if (images) {\n    imageListContent = (\n      <GridList\n        cellHeight={250}\n        cols={3}\n        className={classes.gridList}\n        spacing={1}\n      >\n        {images.map((img) => (\n          <Grow in=\"true\">\n            <GridListTile\n              key={img.id}\n              onClick={(e) => handleOpen(img.largeImageURL)}\n              style={{ cursor: \"pointer\" }}\n              className={classes.gridTile}\n            >\n              <img src={img.largeImageURL} alt={img.tags} />\n              <GridListTileBar\n                title={img.tags}\n                subtitle={\n                  <span>\n                    by <strong>{img.user}</strong>\n                  </span>\n                }\n                actionIcon={\n                  <IconButton\n                    aria-label={`info about ${img.tags}`}\n                    className={classes.icon}\n                    onClick={(e) => handleOpen(img.largeImageURL)}\n                  >\n                    <ZoomIn />\n                  </IconButton>\n                }\n              />\n            </GridListTile>\n          </Grow>\n        ))}\n      </GridList>\n    );\n  } else {\n    imageListContent = null;\n  }\n\n  return (\n    <div className={classes.root}>\n      {imageListContent}\n      <Dialog\n        open={open}\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-title\"\n        fullWidth\n        maxWidth=\"md\"\n      >\n        {/* <DialogTitle id=\"alert-dialog-title\">Dialog Title</DialogTitle> */}\n        <DialogContent>\n          <img\n            src={currentImage}\n            alt=\"current\"\n            style={{ width: \"100%\", height: \"auto\" }}\n          />\n        </DialogContent>\n        <DialogActions style={{ marginRight: \"15px\" }}>\n          <Button onClick={handleClose} variant=\"outlined\" color=\"primary\">\n            Close\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  );\n};\n\nImageResults.propTypes = {\n  images: PropTypes.array.isRequired,\n};\n\nexport default ImageResults;\n"],"sourceRoot":""}