{"version":3,"sources":["components/navbar/NavBar.js","components/search/Search.js","App.js","serviceWorker.js","index.js"],"names":["uiStyles","makeStyles","root","paddingRight","NavBar","classes","AppBar","title","Toolbar","className","Menu","Typography","variant","ImageResults","lazy","useStyles","theme","formControl","minWidth","marginTop","padding","marginBottom","InputLabel","fontSize","Search","useState","searchText","setSearchTest","amount","setAmount","images","setImages","open","setOpen","timeOut","setTimeOut","fetchData","val","axios","get","then","res","data","hits","console","log","catch","err","TextField","label","required","fullWidth","name","value","onChange","e","text","target","clearTimeout","length","setTimeout","onTextChange","onKeyDown","key","handleKeyDown","FormControl","id","Select","labelId","onClose","onOpen","onAmountChange","MenuItem","fallback","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.2f909a7a.chunk.js","sourcesContent":["import React from \"react\";\nimport { AppBar, Toolbar } from \"@material-ui/core\";\nimport Typography from \"@material-ui/core/Typography\";\nimport { Menu } from \"@material-ui/icons\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\nconst uiStyles = makeStyles({\n  root: {\n    paddingRight: \"10px\",\n  },\n});\n\nconst NavBar = () => {\n  const classes = uiStyles();\n\n  return (\n    <AppBar title=\"Pixabay Image Finder\">\n      <Toolbar>\n        <div className={classes.root}>\n          <Menu />\n        </div>\n        <Typography variant=\"h5\">Pixabay Image Finder</Typography>\n      </Toolbar>\n    </AppBar>\n  );\n};\n\nexport default NavBar;\n","import React, { useState, lazy, Suspense } from \"react\";\nimport TextField from \"@material-ui/core/TextField\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { FormControl, InputLabel, MenuItem, Select } from \"@material-ui/core\";\nimport axios from \"axios\";\n\nlet ImageResults = lazy(() =>\n  import(\"../../components/image-results/ImageResults\")\n);\n//import ImageResults from \"../../components/image-results/ImageResults\";\n\nconst useStyles = makeStyles((theme) => ({\n  formControl: {\n    //margin: theme.spacing(1),\n    minWidth: 120,\n  },\n  root: {\n    marginTop: \"80px\",\n    padding: \"0px 20px\",\n    \"& > *\": {\n      marginBottom: \"5px\",\n    },\n  },\n  InputLabel: {\n    fontSize: \"1rem\",\n  },\n}));\n\nconst Search = () => {\n  const classes = useStyles();\n\n  const [searchText, setSearchTest] = useState(\"\");\n  const [amount, setAmount] = useState(10);\n  const [images, setImages] = useState([]);\n  const [open, setOpen] = useState(false);\n  const [timeOut, setTimeOut] = useState(null);\n\n  const apiUrl = \"https://pixabay.com/api\";\n  const apiKey = \"16320203-ba39af2d63ae468cd0630a702\";\n\n  const onTextChange = (e) => {\n    const text = e.target.value;\n    setSearchTest(text);\n\n    clearTimeout(timeOut);\n\n    if (text === \"\" || !text || text.length <= 0) {\n      setImages([]);\n    } else {\n      setTimeOut(\n        setTimeout(() => {\n          fetchData(text);\n        }, 1000)\n      );\n    }\n  };\n\n  const fetchData = (val) => {\n    return axios\n      .get(\n        `${apiUrl}/?key=${apiKey}&q=${val}&image_type=photo&per_page=${amount}&safesearch=true`\n      )\n      .then((res) => {\n        setImages(res.data.hits);\n        console.log(res.data.hits);\n      })\n      .catch((err) => console.log(err));\n  };\n\n  const onAmountChange = (e) => {\n    setAmount(e.target.value);\n    fetchData(searchText);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n\n  const handleOpen = () => {\n    setOpen(true);\n  };\n\n  const handleKeyDown = (e) => {\n    if (e.key === \"Enter\") {\n      fetchData(e.target.value);\n    }\n  };\n\n  return (\n    <div className={classes.root}>\n      <TextField\n        label=\"Type a keyword for search\"\n        required\n        fullWidth\n        name=\"searchText\"\n        value={searchText}\n        onChange={(e) => onTextChange(e)}\n        onKeyDown={(e) => handleKeyDown(e)}\n      />\n      <FormControl className={classes.formControl}>\n        <InputLabel id=\"amount-label\">Amount</InputLabel>\n        <Select\n          labelId=\"amount-label\"\n          id=\"demo-simple-select\"\n          open={open}\n          onClose={handleClose}\n          onOpen={handleOpen}\n          value={amount}\n          onChange={(e) => onAmountChange(e)}\n        >\n          <MenuItem value=\"\">\n            <em>None</em>\n          </MenuItem>\n          <MenuItem value={10}>Ten</MenuItem>\n          <MenuItem value={20}>Twenty</MenuItem>\n          <MenuItem value={30}>Thirty</MenuItem>\n        </Select>\n      </FormControl>\n      <br />\n      <br />\n      {images.length > 0 && (\n        <Suspense fallback={<div>Loading..</div>}>\n          {\" \"}\n          <ImageResults images={images} />\n        </Suspense>\n      )}\n    </div>\n  );\n};\n\nexport default Search;\n","import React from \"react\";\nimport \"./App.css\";\nimport NavBar from \"./components/navbar/NavBar\";\nimport Search from \"./components/search/Search\";\nimport { MuiThemeProvider } from \"@material-ui/core/styles\";\n\nfunction App() {\n  return (\n    <MuiThemeProvider>\n      <NavBar />\n      <Search />\n    </MuiThemeProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  // <React.StrictMode>\n  <App />,\n  // </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}